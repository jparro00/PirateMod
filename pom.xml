<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--Hello! You'll basically should only need to change these names and the steam path (just below)-->
    <!--The author name(s) as they appear in MTS and any other comments are in your ModTheSpire.json-->
    <groupId>piratemod</groupId>
    <artifactId>PirateMod</artifactId> <!--Keep a note of this one: this is the ID used in the "auto add cards" method-->
    <name>The Abyssal</name>
    <version>12.1.2</version>
    <description>Adds The Abyssal as a new playable character.</description>

    <distributionManagement>
        <repository>
            <uniqueVersion>false</uniqueVersion>
            <id>pirate</id>
            <name>Pirate Repository</name>
            <url>file://C:/repo/maven2</url>
            <layout>default</layout>
        </repository>
    </distributionManagement>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <SlayTheSpire.version>12-18-2022</SlayTheSpire.version>
        <ModTheSpire.version>3.8.0</ModTheSpire.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--CHANGE THIS TO YOUR STEAM INSTALLATION-->
        <Steam.path>C:\Program Files (x86)\Steam\steamapps</Steam.path>
        <mod.dir>C:\Program Files (x86)\Steam\steamapps\common\SlayTheSpire\TheAbyssal</mod.dir>
        <last.commit.hash>e7958bf860dc67403378778d68509b94e2cb899f</last.commit.hash>
        <git.dir>C:\Users\jparr\Documents\STS Mods\ThePirate\ThePirate\thePirate</git.dir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.megacrit.cardcrawl</groupId>
            <artifactId>slaythespire</artifactId>
            <version>${SlayTheSpire.version}</version>
            <scope>system</scope>
            <systemPath>${Steam.path}/common/SlayTheSpire/desktop-1.0.jar</systemPath>
            <!--<systemPath>${basedir}/../lib/desktop-1.0.jar</systemPath>-->
        </dependency>
        <dependency>
            <groupId>com.evacipated.cardcrawl</groupId>
            <artifactId>modthespire</artifactId>
            <version>${ModTheSpire.version}</version>
            <scope>system</scope>
            <systemPath>${Steam.path}/workshop/content/646570/1605060445/ModTheSpire.jar</systemPath>
            <!--<systemPath>${basedir}/../lib/ModTheSpire.jar</systemPath>-->
        </dependency>
        <dependency>
            <groupId>basemod</groupId>
            <artifactId>basemod</artifactId>
            <version>5.0.0</version>
            <scope>system</scope>
            <systemPath>${Steam.path}/workshop/content/646570/1605833019/BaseMod.jar</systemPath>
            <!--<systemPath>${basedir}/../lib/BaseMod.jar</systemPath>-->
        </dependency>
        <dependency>
            <groupId>com.evacipated.cardcrawl.mod</groupId>
            <artifactId>StSLib</artifactId>
            <version>1.3.2</version>
            <scope>system</scope>
            <systemPath>${Steam.path}/workshop/content/646570/1609158507/StSLib.jar</systemPath>
            <!--<systemPath>${basedir}/../lib/StSLib.jar</systemPath>-->
        </dependency>
    </dependencies>


    <!-- This is how your code is packaged into the jar file-->
    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <excludes>
                        <exclude>**/*.psd</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <configuration>
                            <target>
                                <!-- This moves your mod into a common folder where all mods you make can go. -->
                                <echo>before</echo>
                                <copy file="target/${project.artifactId}.jar" tofile="${Steam.path}/common/SlayTheSpire/mods/${project.artifactId}.jar"/>
                                <echo>after</echo>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <configuration>
                            <target>
                                <!-- This moves your mod into a common folder where all mods you make can go. -->
                                <copy file="target/${project.artifactId}.jar" tofile="${Steam.path}/common/SlayTheSpire/mods/${project.artifactId}.jar"/>
                                <copy file="target/${project.artifactId}.jar" tofile="${mod.dir}/content/${project.artifactId}.jar"/>


                                <!-- Open Abyssal mod folder in Windows Explorer -->
                                <exec executable="explorer">
                                    <arg value="${mod.dir}"/>
                                </exec>


                                <!-- Generate Git log to a text file -->
                                <exec executable="cmd">
                                    <arg value="/c"/>
                                    <arg value="cd &quot;${git.dir}&quot; &amp;&amp; git log > &quot;${mod.dir}\gitlog.txt&quot;"/>
                                </exec>

                                <!-- Find and Replace all instances of "    " in gitlog.txt -->
                                <exec executable="powershell">
                                    <arg value="-Command"/>
                                    <arg value="(Get-Content '${mod.dir}\gitlog.txt') -replace '    ', '' | Set-Content '${mod.dir}\gitlog.txt'"/>
                                </exec>

<!--

                                &lt;!&ndash; Open the generated Git log text file &ndash;&gt;
                                <exec executable="cmd">
                                    <arg value="/c"/>
                                    <arg value="start"/>
                                    <arg value="&quot;&quot;"/>
                                    <arg value="&quot;${mod.dir}\gitlog.txt&quot;"/>
                                </exec>
-->

<!--
                                &lt;!&ndash; Find and Replace version placeholder in f1 &ndash;&gt;
                                <exec executable="powershell">
                                    <arg value="-Command"/>
                                    <arg value="(Get-Content '${mod.dir}\config.json') -replace 'v[0-9]+\.[0-9]+\.[0-9]+', 'v${project.version}' | Set-Content '${mod.dir}\config.json'"/>
                                </exec>

                                &lt;!&ndash; Update whether this is patch/minor/major &ndash;&gt;
                                <exec executable="powershell">
                                    <arg value="-Command"/>
                                    <arg value="(Get-Content '${mod.dir}\config.json') -replace '(\[h1\])(Patch|Minor Release|Major Release)( v[0-9]+\.[0-9]+\.[0-9]+)', '$1Patch$3' | Set-Content '${mod.dir}\config.json'"/>
                                </exec>
                                <exec executable="powershell">
                                    <arg value="-Command"/>
                                    <arg value="(Get-Content '${mod.dir}\config.json') -replace '(\[h1\])(Patch|Minor Release|Major Release)( v[0-9]+\.[0-9]+\.0)', '$1Minor Release$3' | Set-Content '${mod.dir}\config.json'"/>
                                </exec>
                                <exec executable="powershell">
                                    <arg value="-Command"/>
                                    <arg value="(Get-Content '${mod.dir}\config.json') -replace '(\[h1\])(Patch|Minor Release|Major Release)( v[0-9]+\.0\.0)', '$1Major Release$3' | Set-Content '${mod.dir}\config.json'"/>
                                </exec>
-->

                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <id>my-execution</id>
                        <phase>install</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>cmd</executable>
                            <workingDirectory>${mod.dir}</workingDirectory>
                            <arguments>
                                <argument>/c</argument>
                                <argument>${mod.dir}\extract_bug_lines.bat</argument>
                                <argument>${last.commit.hash}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${mod.dir}/bug_lines.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.0.0</version> <!-- use an appropriate version -->
                <executions>
                    <execution>
                        <phase>deploy</phase> <!-- choose an appropriate phase -->
                        <configuration>
                            <target name="checkVersion">
                                <echo>Starting checkVersion</echo>
                                <!-- Pass Maven properties to Ant properties -->
                                <property name="version" value="${version}" />
                                <property name="bug_lines" value="${bugLines}" />
                                <property name="balance_lines" value="${balanceLines}" />
                                <property name="localization_lines" value="${localizationLines}" />
                                <property name="uiqol_lines" value="${uiqolLines}" />

                                <!-- Check if 'version' is in config.json -->
                                <script language="javascript"> <![CDATA[
                                    importClass(java.io.FileReader);
                                    importClass(java.io.BufferedReader);

                                    var filePath = project.getProperty("mod.dir") + "/config.json";
                                    var reader = new BufferedReader(new FileReader(filePath));
                                    var content = "";
                                    var line;
                                    while ((line = reader.readLine()) !== null) {
                                        content += line;
                                    }
                                    reader.close();

                                    var config = JSON.parse(content);
                                    var proceed = (typeof config.version === 'undefined');
                                    System.setProperty("shouldProceed", proceed);
                                ]]> </script>

                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.0.0</version> <!-- use an appropriate version -->
                <executions>
                    <execution>
                        <phase>deploy</phase> <!-- choose an appropriate phase -->
                        <configuration>
                            <target name="updateConfigJson" >
                                <echo>Starting updateConfigJson</echo>
                                <!-- Pass Maven properties to Ant properties -->
                                <property name="version" value="${project.version}" />
                                <property name="bug_lines" value="${bugLines}" />
                                <property name="balance_lines" value="${balanceLines}" />
                                <property name="localization_lines" value="${localizationLines}" />
                                <property name="uiqol_lines" value="${uiqolLines}" />
                                <!-- Insert your Ant logic here, as given in the previous example -->

                                <!-- Add major/minor/patch info -->
                                <script language="javascript"> <![CDATA[
                                  var version = project.getProperty("version");
                                  var note = "";
                                  if (/^\d+\.0\.0$/.test(version)) {
                                    note = "[h1]Major Release " + "v" + version + "[/h1]";
                                  } else if (/^\d+\.\d+\.0$/.test(version)) {
                                    note = "[h1]Minor Release " + "v" + version + "[/h1]";
                                  } else if (/^\d+\.\d+\.\d+$/.test(version)) {
                                    note = "[h1]Patch " + "v" + version + "[/h1]";
                                  }
                                  note = note + "\n\n";
                                  project.setProperty("change.note", note);

                                //<!-- Add bug_lines if they exist -->
                                  var lines = project.getProperty("bug_lines");
                                  var header = "Bug Fixes";
                                  var note = project.getProperty("change.note");
                                  if (lines != null && lines != "") {
                                    note += "[h2]" + header + ":[/h2]\n" + lines + "\n";
                                  }
                                  project.setProperty("change.note", note);

                                //<!-- Add Balance_lines if they exist -->
                                  var lines = project.getProperty("balance_lines");
                                  var header = "Balance Changes";
                                  var note = project.getProperty("change.note");
                                  if (lines != null && lines != "") {
                                    note += "[h2]" + header + ":[/h2]\n" + lines + "\n";
                                  }
                                  project.setProperty("change.note", note);

                                //<!-- Add localization_lines if they exist -->
                                  var lines = project.getProperty("localization_lines");
                                  var header = "Localization";
                                  var note = project.getProperty("change.note");
                                  if (lines != null && lines != "") {
                                    note += "[h2]" + header + ":[/h2]\n" + lines + "\n";
                                  }
                                  project.setProperty("change.note", note);

                                //<!-- Add uiqol_lines if they exist -->
                                  var lines = project.getProperty("uiqol_lines");
                                  var header = "UI/QoL Enhancements";
                                  var note = project.getProperty("change.note");
                                  if (lines != null && lines != "") {
                                    note += "[h2]" + header + ":[/h2]\n" + lines + "\n";
                                  }
                                  project.setProperty("change.note", note);
                                ]]></script>

                                <!-- Print the final change.note -->
                                <echo>print change not</echo>
<!--
                                <echo>${change.note}</echo>
-->
                                <echo>printed change not</echo>
                                <replaceregexp file="${mod.dir}/config.json"
                                               match="(&quot;changeNote&quot;:\s*&quot;)((?:\\.|[^&quot;\\])*)(&quot;)"
                                               replace="\1${change.note}\3"
                                               flags="g"/>
                                <echo>print again</echo>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>ModTheSpire.json</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>ModTheSpire.json</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>
